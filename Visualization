cfg = {
    "trade_config": {
        "warmup_period": 1000,
        "initial_margin_balance": "100000USDT",
        "strategy_timeframe": "60min",
        "max_leverage": 2,
        "min_margin_rate": 0.1
        },
    "backtester_config": {
        "ohlcv_data_path": "data/public.pkl",
        "external_data_paths": ["./data/public_froi.pkl"],
        "time_zone": "Asia/Tokyo",
        "start_date": datetime.date(2020, 8, 1),
        "end_date": datetime.date(2022, 10, 31),
        "exchange": "binance",
        "symbol": ["BTCUSDT", "ETHUSDT", "XRPUSDT"],
        "backtest_timeframe": "60min",
        "slippage": 0.01,
        "delay": 0,
        "use_wandb": False,
        "save_model": True,
        "logging": True,
        "position_in_fiat": True,
        "daily_position": False,
        "backtest_num_worker": "max",
        "get_model_num_worker": "max",
        "compounding_strategy": False
        },
    "exchange_config": {
        "BTCUSDT": {},
        "ETHUSDT": {},
        "XRPUSDT": {}
        },
    "cv": {
        "type": "cpcv", #type: 評価方法．cpcvを使用します．
        "n_purge": 10, #n_path: cpcvの経路数．
        "n_path": 4 #n_purge: パージングする期間．
        },
    }

# クラスのインスタンス化
strategy = Strategy(cfg)

# データの前処理
preprocessed_df = strategy.preprocess(df)

# モデルの取得
models = strategy.get_model(preprocessed_df)

# モデルの可視化
print(models)

# シグナルの生成
signals_df = strategy.get_signal(preprocessed_df, models)

# 最初の1ヶ月のデータを抽出
start_date = df.index.get_level_values('timestamp').min()
end_date = start_date + pd.DateOffset(months=1)
filtered_signals_df = signals_df.loc[(slice(start_date, end_date), slice(None)), :]

# シンボルごとにプロット
symbols = cfg["backtester_config"]["symbol"]
fig, axs = plt.subplots(len(symbols), 1, figsize=(10, 8), sharex=True)

for i, symbol in enumerate(symbols):
    symbol_signals_df = filtered_signals_df.xs(symbol, level='symbol')
    axs[i].plot(symbol_signals_df.index, symbol_signals_df['signal'], label=f'{symbol} Signal')
    axs[i].set_ylim(-1.1, 1.1)  # 縦軸の範囲を-1.1から1.1に設定
    axs[i].set_ylabel('Signal')
    axs[i].legend()

plt.xlabel('Timestamp')
plt.xticks(rotation=45)  # 横軸のラベルを回転させて見やすくする
plt.show()
